name: Publish to NPM

on:
  release:
    types: [published, created]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string

concurrency:
  group: publish-${{ github.event.release.tag_name || github.ref_name }}
  cancel-in-progress: false

jobs:
  publish-npm:
    if: github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build library
        run: pnpm run build:lib

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./projects/ngx-dice-captcha/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Check if version exists on NPM
        id: check-version
        run: |
          PACKAGE_NAME="ngx-dice-captcha"
          VERSION="${{ steps.package-version.outputs.version }}"

          if npm view $PACKAGE_NAME@$VERSION version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Version $VERSION already exists on NPM"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Version $VERSION does not exist, proceeding with publish"
          fi

      - name: Update package version (if manual trigger)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
        run: |
          cd dist/ngx-dice-captcha
          # Check if version is different before updating
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          else
            echo "Version already matches, skipping update"
          fi

      - name: Publish to NPM (dry-run)
        if: steps.check-version.outputs.exists == 'true'
        run: |
          cd dist/ngx-dice-captcha
          npm publish --dry-run
          echo "‚ÑπÔ∏è Dry-run completed. Skipping actual publish as version already exists."

      - name: Publish to NPM
        if: steps.check-version.outputs.exists == 'false'
        run: |
          cd dist/ngx-dice-captcha
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NGX_DICE_CAPTCHA }}

      - name: Verify NPM publication
        if: steps.check-version.outputs.exists == 'false'
        run: |
          echo "‚è≥ Waiting for NPM to propagate..."
          sleep 30

          VERSION="${{ steps.package-version.outputs.version }}"
          if npm view ngx-dice-captcha@$VERSION version 2>/dev/null; then
            echo "‚úÖ Package successfully published to NPM"
            echo "üì¶ View at: https://www.npmjs.com/package/ngx-dice-captcha/v/$VERSION"
          else
            echo "‚ùå Package not found on NPM"
            exit 1
          fi

      - name: Create GitHub Release Asset
        if: steps.check-version.outputs.exists == 'false' && github.event_name == 'release'
        run: |
          cd dist/ngx-dice-captcha
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          gh release upload ${{ github.event.release.tag_name }} $PACKAGE_FILE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post publish summary
        if: steps.check-version.outputs.exists == 'false'
        run: |
          echo "## üéâ Successfully Published to NPM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** ngx-dice-captcha" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.package-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** https://www.npmjs.com/package/ngx-dice-captcha" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install ngx-dice-captcha@${{ steps.package-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Post skip summary
        if: steps.check-version.outputs.exists == 'true'
        run: |
          echo "## ‚ö†Ô∏è Publish Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Version ${{ steps.package-version.outputs.version }} already exists on NPM" >> $GITHUB_STEP_SUMMARY
          echo "Please update the version in package.json before publishing" >> $GITHUB_STEP_SUMMARY

  publish-github:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@easy-cloud-in'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build library
        run: pnpm run build:lib

      - name: Configure package for GitHub Packages
        run: |
          cd dist/ngx-dice-captcha
          # Update package name for GitHub Packages
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.name = '@easy-cloud-in/ngx-dice-captcha';
            pkg.publishConfig = { registry: 'https://npm.pkg.github.com' };
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish to GitHub Packages
        run: |
          cd dist/ngx-dice-captcha
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post GitHub Packages summary
        run: |
          echo "## üì¶ Published to GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** @easy-cloud-in/ngx-dice-captcha" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** GitHub Packages" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: [publish-npm, publish-github]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify on success
        if: needs.publish-npm.result == 'success'
        run: |
          echo "‚úÖ Package published successfully to NPM and GitHub Packages!"

      - name: Notify on failure
        if: needs.publish-npm.result == 'failure' || needs.publish-github.result == 'failure'
        run: |
          echo "‚ùå Package publish failed. Check the logs for details."
          exit 1

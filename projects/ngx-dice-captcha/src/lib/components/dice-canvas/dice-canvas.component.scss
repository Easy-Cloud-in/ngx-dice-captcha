@use '../../styles/variables' as *;
@use '../../styles/mixins' as *;

.dice-canvas-container {
  // Enable container queries for this component
  container-type: size;
  container-name: dice-canvas;

  position: relative;
  width: 100%;
  // Use CSS custom property for configurable aspect ratio (Phase 2 - Task 2.1)
  // Fallback to 16:9 (1.7778) if custom property not set
  aspect-ratio: var(--dice-canvas-aspect-ratio, 1.7778);
  // Remove fixed min/max heights - let container queries handle this
  border-radius: $canvas-border-radius;
  overflow: visible; // Changed from hidden to visible to allow positioned elements to show
  background-color: $canvas-background-color;
  // background-image: $canvas-background-image;
  background-attachment: $canvas-background-attachment;
  background-size: $canvas-background-size;
  // @include shadow-md;
  // @include transition(box-shadow);

  // Prevent overlay from affecting container size
  contain: size; // Changed from layout to size for container queries
  isolation: isolate;

  &.rolling {
    @include shadow-lg;
  }

  &:hover {
    // @include shadow-hover;
  }

  // Fill container mode - ignore aspect ratio and fill parent (Phase 2 - Task 2.1)
  &.fill-container {
    aspect-ratio: unset !important;
    height: 100%;
    min-height: 300px; // Minimum height for usability
  }

  // Custom aspect ratio mode (Phase 2 - Task 2.1)
  &.custom-aspect {
    // Aspect ratio set via CSS custom property
    // Applied by configureContainerBehavior() method
  }
}

// Screen reader only content - must be at root level to apply to all screen sizes
.sr-only {
  @include sr-only;

  // Additional safeguards to ensure content is completely hidden
  position: absolute !important;
  left: -10000px !important;
  top: -10000px !important;
  width: 1px !important;
  height: 1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
}

.dice-canvas {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
  touch-action: none;
  z-index: 1; // Base layer
  background: transparent !important; // Force transparent background to show container background

  @include focus-outline($primary-color);
}

.canvas-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1001; // Above control overlay (z-index: 1000)
  @include animation-fade-in;
}

.rolling-indicator {
  position: absolute;
  top: $spacing-sm;
  right: $spacing-sm;
  @include flex-row($spacing-xs);
  align-items: center;
  padding: $spacing-xs $spacing-sm;
  background: rgba(255, 255, 255, $opacity-overlay);
  border-radius: $border-radius-md;
  @include shadow-md;
  backdrop-filter: blur($backdrop-blur-strong);
}

.spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba($primary-color, 0.2);
  border-top-color: $primary-color;
  border-radius: $border-radius-full;
  animation: spin 1s linear infinite;
  flex-shrink: 0;
}

.rolling-text {
  font-size: $font-size-xs;
  font-weight: $font-weight-semibold;
  color: $text-primary-light;
  white-space: nowrap;
}

.dice-results {
  position: absolute;
  z-index: 1002; // Above canvas-overlay (1001) and control-overlay (1000) to ensure visibility
  @include flex-row($spacing-xs);
  align-items: center;
  padding: $spacing-xs $spacing-sm;
  background: rgba(255, 255, 255, $opacity-overlay);
  border-radius: $border-radius-md;
  @include shadow-md;
  backdrop-filter: blur($backdrop-blur-strong);
  pointer-events: none; // Don't interfere with interactions

  // Ensure visibility
  visibility: visible;
  opacity: 1;

  // Position variants (Requirement 10.7)
  &--bottom-right {
    bottom: 30px; // Default: 30px margin for better visibility
    right: 12px;
    animation: slideInFromRight 0.3s ease-out;
  }

  &--bottom-left {
    bottom: 30px;
    left: 12px;
    animation: slideInFromLeft 0.3s ease-out;
  }

  &--top-right {
    top: 12px;
    right: 12px;
    animation: slideInFromRight 0.3s ease-out;
  }

  &--top-left {
    top: 12px;
    left: 12px;
    animation: slideInFromLeft 0.3s ease-out;
  }
}

.results-label {
  font-size: $font-size-xs;
  font-weight: $font-weight-semibold;
  color: $text-secondary-light; // #666 on rgba(255,255,255,0.95) background
  // Contrast ratio: ~7.5:1 (WCAG AA compliant for normal text)
  @include text-uppercase;
  white-space: nowrap;
}

.result-value {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 24px;
  height: 24px;
  padding: 0 $spacing-xs;
  background: linear-gradient(135deg, $primary-gradient-start 0%, $primary-gradient-end 100%);
  // Gradient colors: #667eea to #764ba2
  color: white; // White text on gradient background
  // Contrast ratio: ~4.8:1 on #667eea, ~6.2:1 on #764ba2 (WCAG AA compliant)
  font-size: $font-size-sm;
  font-weight: $font-weight-bold;
  border-radius: $border-radius-sm;
  @include shadow-sm;
  animation: popIn 0.3s ease-out;
  animation-delay: calc(var(--index, 0) * 0.1s);
  animation-fill-mode: backwards;
}

.results-separator {
  font-size: $font-size-sm;
  font-weight: $font-weight-normal;
  color: $text-secondary-light;
  margin: 0 $spacing-xs;
  opacity: 0.5;
}

.results-sum {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 32px;
  height: 24px;
  padding: 0 $spacing-sm;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  font-size: $font-size-sm;
  font-weight: $font-weight-bold;
  border-radius: $border-radius-sm;
  @include shadow-sm;
  animation: popIn 0.4s ease-out;
  animation-delay: 0.3s;
  animation-fill-mode: backwards;
  border: 2px solid rgba(255, 255, 255, 0.3);
}

// Animations
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInFromLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes popIn {
  from {
    opacity: 0;
    transform: scale(0.5);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

// Container Queries - Component responds to its container size, not viewport
// This provides better modularity and reusability

// Small containers (< 500px width) - Typically mobile devices
@container dice-canvas (max-width: 500px) {
  .dice-canvas-container {
    aspect-ratio: 4 / 3; // Square-ish aspect ratio for mobile
    min-height: 400px; // Significantly increased from 300px for better visibility
  }

  .dice-results {
    padding: 4px 6px;
    gap: 4px;

    &--bottom-right {
      bottom: 10px;
      right: 6px;
    }

    &--bottom-left {
      bottom: 10px;
      left: 6px;
    }

    &--top-right {
      top: 6px;
      right: 6px;
    }

    &--top-left {
      top: 6px;
      left: 6px;
    }
  }

  .results-label {
    font-size: 0.625rem;
  }

  .result-value {
    min-width: 20px;
    height: 20px;
    font-size: 0.6875rem;
  }

  .rolling-indicator {
    top: 6px;
    right: 6px;
    padding: 4px 6px;
    gap: 4px;
  }

  .spinner {
    width: 14px;
    height: 14px;
  }

  .rolling-text {
    font-size: 0.625rem;
  }
}

// Medium containers (501px - 800px) - Tablets and small desktop
@container dice-canvas (min-width: 501px) and (max-width: 800px) {
  .dice-canvas-container {
    aspect-ratio: 3 / 2; // Taller aspect ratio for tablets
    min-height: 450px; // Significantly increased from 350px for better containment
  }

  .dice-results {
    padding: 6px 10px;
    gap: 5px;

    &--bottom-right {
      bottom: 20px;
      right: 10px;
    }

    &--bottom-left {
      bottom: 20px;
      left: 10px;
    }

    &--top-right {
      top: 10px;
      right: 10px;
    }

    &--top-left {
      top: 10px;
      left: 10px;
    }
  }

  .results-label {
    font-size: 0.75rem;
  }

  .result-value {
    min-width: 24px;
    height: 24px;
    font-size: 0.8125rem;
  }

  .rolling-indicator {
    padding: 6px 10px;
    gap: 5px;
  }

  .spinner {
    width: 16px;
    height: 16px;
  }
}

// Large containers (801px - 1200px) - Desktop
@container dice-canvas (min-width: 801px) and (max-width: 1200px) {
  .dice-results {
    padding: 8px 12px;
    gap: 6px;

    &--bottom-right {
      bottom: 30px;
      right: 12px;
    }

    &--bottom-left {
      bottom: 30px;
      left: 12px;
    }

    &--top-right {
      top: 12px;
      right: 12px;
    }

    &--top-left {
      top: 12px;
      left: 12px;
    }
  }

  .results-label {
    font-size: $font-size-sm;
  }

  .result-value {
    min-width: 28px;
    height: 28px;
    font-size: $font-size-md;
  }

  .rolling-indicator {
    top: 12px;
    right: 12px;
    padding: 8px 12px;
    gap: 6px;
  }

  .spinner {
    width: 18px;
    height: 18px;
  }

  .rolling-text {
    font-size: $font-size-sm;
  }
}

// Extra large containers (> 1200px) - Large desktop and ultra-wide
@container dice-canvas (min-width: 1201px) {
  .dice-results {
    padding: 10px 16px;
    gap: 8px;

    &--bottom-right {
      bottom: 35px;
      right: 16px;
    }

    &--bottom-left {
      bottom: 35px;
      left: 16px;
    }

    &--top-right {
      top: 16px;
      right: 16px;
    }

    &--top-left {
      top: 16px;
      left: 16px;
    }
  }

  .results-label {
    font-size: $font-size-base;
  }

  .result-value {
    min-width: 32px;
    height: 32px;
    font-size: $font-size-lg;
  }

  .rolling-indicator {
    top: 16px;
    right: 16px;
    padding: 10px 16px;
    gap: 8px;
  }

  .spinner {
    width: 20px;
    height: 20px;
  }

  .rolling-text {
    font-size: $font-size-base;
  }
}

// Fallback for browsers that don't support container queries
// Use viewport-based media queries as fallback
@supports not (container-type: size) {
  @include mobile {
    .dice-canvas-container {
      aspect-ratio: 4 / 3; // Match container query value
      min-height: 400px;
    }

    .dice-results {
      padding: 4px 6px;
      gap: 4px;
    }

    .results-label {
      font-size: 0.625rem;
    }

    .result-value {
      min-width: 20px;
      height: 20px;
      font-size: 0.6875rem;
    }
  }

  @include md-screen {
    .dice-canvas-container {
      aspect-ratio: 3 / 2; // Match container query value
      min-height: 450px;
    }

    .dice-results {
      padding: 6px 10px;
    }
  }

  @include lg-screen {
    .dice-results {
      padding: 8px 12px;
      gap: 6px;
    }

    .results-label {
      font-size: $font-size-sm;
    }

    .result-value {
      min-width: 28px;
      height: 28px;
      font-size: $font-size-md;
    }
  }
}

// Keep viewport-based media queries ONLY for ultra-wide displays and max constraints
// Ultra-wide displays (2000px and above) - Requirements 6.3, 6.4, 6.5
@media (min-width: 2000px) {
  .dice-canvas-container {
    // Maintain maximum aspect ratio of 3:1 (Requirement 6.5)
    // If width exceeds 3x height, constrain it
    max-width: 2700px; // 3:1 ratio maximum
    margin: 0 auto; // Center the canvas if constrained
  }

  .dice-results {
    padding: 14px 24px;
    gap: 12px;

    &--bottom-right {
      bottom: 24px;
      right: 24px;
    }

    &--bottom-left {
      bottom: 24px;
      left: 24px;
    }

    &--top-right {
      top: 24px;
      right: 24px;
    }

    &--top-left {
      top: 24px;
      left: 24px;
    }
  }

  .results-label {
    font-size: $font-size-xl;
  }

  .result-value {
    min-width: 40px;
    height: 40px;
    font-size: $font-size-2xl;
  }

  .rolling-indicator {
    top: 24px;
    right: 24px;
    padding: 14px 24px;
    gap: 12px;
  }

  .spinner {
    width: 24px;
    height: 24px;
  }

  .rolling-text {
    font-size: $font-size-xl;
  }
}

@include reduced-motion {
  .canvas-overlay,
  .dice-results,
  .result-value {
    animation: none;
  }

  .spinner {
    animation: none;
    border-top-color: transparent;
  }
}

// Dark mode support
@include dark-mode {
  .dice-canvas-container {
    background: linear-gradient(135deg, #434343 0%, #000000 100%);
  }

  .rolling-indicator {
    background: rgba(30, 30, 30, 0.85);
  }

  .rolling-text {
    color: $text-primary-dark;
  }

  .dice-results {
    background: rgba(30, 30, 30, 0.85); // Dark background for dark mode
  }

  .results-label {
    color: $text-secondary-dark; // #b0b0b0 on rgba(30,30,30,0.85) background
    // Contrast ratio: ~8.2:1 (WCAG AA compliant for normal text)
  }

  .result-value {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    // Same gradient as light mode
    // White text on gradient: ~4.8:1 to ~6.2:1 (WCAG AA compliant)
  }
}

// High contrast mode
@include high-contrast {
  .dice-canvas {
    &:focus {
      outline-width: 3px;
    }
  }

  .result-value {
    border: $border-width-thick solid white;
  }
}
